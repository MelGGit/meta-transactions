/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface RecipientInterface extends utils.Interface {
  functions: {
    "addNewMessage(string)": FunctionFragment;
    "addressToMessage(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addNewMessage" | "addressToMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNewMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToMessage",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToMessage",
    data: BytesLike
  ): Result;

  events: {
    "MessagePersisted(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessagePersisted"): EventFragment;
}

export interface MessagePersistedEventObject {
  from: string;
  message: string;
}
export type MessagePersistedEvent = TypedEvent<
  [string, string],
  MessagePersistedEventObject
>;

export type MessagePersistedEventFilter =
  TypedEventFilter<MessagePersistedEvent>;

export interface Recipient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RecipientInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNewMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressToMessage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addNewMessage(
    message: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressToMessage(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addNewMessage(message: string, overrides?: CallOverrides): Promise<void>;

    addressToMessage(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MessagePersisted(address,string)"(
      from?: string | null,
      message?: null
    ): MessagePersistedEventFilter;
    MessagePersisted(
      from?: string | null,
      message?: null
    ): MessagePersistedEventFilter;
  };

  estimateGas: {
    addNewMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressToMessage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressToMessage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
