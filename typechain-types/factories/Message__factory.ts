/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Message, MessageInterface } from "../Message";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "trustedForwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "NewMessage",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "addNewMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "addressToMessage",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516106fe3803806106fe833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b6080516105ea610114600039600050506105ea6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806346fc95d11461003b578063adb59e761461006b575b600080fd5b610055600480360381019061005091906102ed565b610087565b60405161006291906103b3565b60405180910390f35b6100856004803603810190610080919061050a565b610127565b005b600060205280600052604060002060009150905080546100a690610582565b80601f01602080910402602001604051908101604052809291908181526020018280546100d290610582565b801561011f5780601f106100f45761010080835404028352916020019161011f565b820191906000526020600020905b81548152906001019060200180831161010257829003601f168201915b505050505081565b6000601436033560601c9050816000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090805190602001906101859291906101d8565b508073ffffffffffffffffffffffffffffffffffffffff167f8da45d748eefefd09cc1491cd32086b6d6a0bd7063d08f05c94df9eb1404bd80836040516101cc91906103b3565b60405180910390a25050565b8280546101e490610582565b90600052602060002090601f016020900481019282610206576000855561024d565b82601f1061021f57805160ff191683800117855561024d565b8280016001018555821561024d579182015b8281111561024c578251825591602001919060010190610231565b5b50905061025a919061025e565b5090565b5b8082111561027757600081600090555060010161025f565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ba8261028f565b9050919050565b6102ca816102af565b81146102d557600080fd5b50565b6000813590506102e7816102c1565b92915050565b60006020828403121561030357610302610285565b5b6000610311848285016102d8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610354578082015181840152602081019050610339565b83811115610363576000848401525b50505050565b6000601f19601f8301169050919050565b60006103858261031a565b61038f8185610325565b935061039f818560208601610336565b6103a881610369565b840191505092915050565b600060208201905081810360008301526103cd818461037a565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61041782610369565b810181811067ffffffffffffffff82111715610436576104356103df565b5b80604052505050565b600061044961027b565b9050610455828261040e565b919050565b600067ffffffffffffffff821115610475576104746103df565b5b61047e82610369565b9050602081019050919050565b82818337600083830152505050565b60006104ad6104a88461045a565b61043f565b9050828152602081018484840111156104c9576104c86103da565b5b6104d484828561048b565b509392505050565b600082601f8301126104f1576104f06103d5565b5b813561050184826020860161049a565b91505092915050565b6000602082840312156105205761051f610285565b5b600082013567ffffffffffffffff81111561053e5761053d61028a565b5b61054a848285016104dc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061059a57607f821691505b602082108114156105ae576105ad610553565b5b5091905056fea264697066735822122017b01cce009b93ba1c5304890aafc8bec690267ccd9a9da311c8e3fa4a114c1c64736f6c63430008090033";

type MessageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MessageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Message__factory extends ContractFactory {
  constructor(...args: MessageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Message> {
    return super.deploy(trustedForwarder, overrides || {}) as Promise<Message>;
  }
  override getDeployTransaction(
    trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(trustedForwarder, overrides || {});
  }
  override attach(address: string): Message {
    return super.attach(address) as Message;
  }
  override connect(signer: Signer): Message__factory {
    return super.connect(signer) as Message__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MessageInterface {
    return new utils.Interface(_abi) as MessageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Message {
    return new Contract(address, _abi, signerOrProvider) as Message;
  }
}
